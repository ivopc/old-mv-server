{"version":3,"sources":["webpack:///./node_modules/async/dist/async.mjs"],"names":["process","initialParams","fn","args","callback","pop","call","this","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","setTimeout","wrap","defer","setImmediate$1","asyncify","func","isAsync","handlePromise","apply","result","e","then","promise","value","invokeCallback","err","message","Error","error","Symbol","toStringTag","wrapAsync","asyncFn","awaitify","arity","length","awaitable","Promise","resolve","reject","cbArgs","Object","defineProperty","name","applyEach","eachfn","fns","callArgs","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","index","v","isArrayLike","breakLoop","once","wrapper","callFn","assign","createIterator","coll","i","len","key","createArrayIterator","obj","okeys","iterator","getIterator","item","next","done","createES2015Iterator","keys","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit","RangeError","asyncIterator","nextElem","looping","elem","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf$1","map$1","applyEach$1","eachOfSeries$1","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","enqueueTask","task","push","taskCallback","safeResults","forEach","rkey","processQueue","taskFn","runTask","shift","run","getDependents","taskName","Array","isArray","indexOf","dependencies","slice","remainingDependencies","dependencyName","join","taskListeners","addListener","currentTask","dependent","checkForDeadlocks","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","DLL","[object Object]","head","tail","node","prev","newNode","insertBefore","setInitial","insertAfter","removeLink","cur","data","testFn","curr","dll","queue","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","empty","off","event","handler","filter","ev","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_tasks","unshift","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","paused","map","datum","remove","Math","min","defineProperties","writable","reduce$1","memo","x","seq","functions","_functions","newargs","nextargs","mapLimit$1","concatLimit$1","val","mapResults","concat$1","concatSeries$1","_createTester","check","getResult","testResult","testPassed","detect$1","bool","detectLimit$1","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst$1","test","_fn","_test","truth","_withoutIndex","each","eachLimit$2","eachSeries$1","ensureAsync","sync","innerArgs","every$1","everyLimit$1","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit$1","filterSeries$1","forever$1","errback","groupByLimit$1","hasOwnProperty","prototype","log","mapValuesLimit$1","newObj","_parallel","taskCb","queue$1","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","p","smaller","parent","t","percUp","top","percDown","j","y","priority","race$1","TypeError","reduceRight","array","reversed","reverse","reflect","reflectCallback","retVal","reject$2","rejectLimit$1","rejectSeries$1","constant$1","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","options","times","intervalFunc","arguments","acc","interval","errorFilter","parseTimes","_task","attempt","retryAttempt","some$1","Boolean","someLimit$1","someSeries$1","sortBy$1","criteria","comparator","left","right","timesLimit","count","size","range","tryEach$1","whilst$1","rest","waterfall$1","taskIndex","nextTask","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","src","toString","replace","match","split","arg","trim","parseParams","newArgs","cargo","cargoQueue","compose","concatLimit","concatSeries","constant","ignoredArgs","detect","detectLimit","detectSeries","doUntil","doWhilst","eachLimit","eachOf","eachOfSeries","eachSeries","every","everyLimit","everySeries","filterLimit","filterSeries","forever","groupBy","groupByLimit","groupBySeries","mapLimit","mapSeries","mapValues","mapValuesLimit","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","parallel","parallelLimit","priorityQueue","race","reduce","reflectAll","rejectLimit","rejectSeries","retryable","series","some","someLimit","someSeries","sortBy","timeout","milliseconds","info","timer","timedOut","clearTimeout","code","n","timesSeries","transform","accumulator","k","tryEach","unmemoize","until","waterfall","whilst","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","__webpack_exports__"],"mappings":"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","file":"static/js/0.92db041817e6e127584a.js","sourcesContent":["/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    Object.defineProperty(awaitable, 'name', {\n        value: `awaitable(${asyncFn.name})`\n    });\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5;) },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * async.until(function test(page, cb) {\n *     cb(null, page.next == null)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         next(err, body)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/async/dist/async.mjs\n// module id = p4yR\n// module chunks = 0"],"sourceRoot":""}